## 構成要素と役割
emulator.py:
シミュレーションエンジンのメインクラスを実装し、シミュレーション全体の管理（ノードとリンクの追加、シミュレーションの実行、イベントの処理）を行う。

event_queue.py:
イベントキューを管理し、シミュレーション内で発生するイベント（パケット到着、フロータイムアウトなど）を時間順に処理する。

packet.py:
パケットの構造を定義し、シミュレーション内でパケットの生成、操作、解析を行う。

## 設計方針

イベント駆動型シミュレーション: イベントキューを用いて、シミュレーション中に発生するさまざまなイベントを逐次的に処理。これにより、スケジュールされたイベントが時系列順に実行され、リアルなシミュレーション環境を再現。
パケットベースのシミュレーション: 各ネットワークコンポーネント間でやり取りされるパケットの生成、操作、転送を中心にシミュレーションを進める。パケットの内容に基づいて、スイッチやコントローラが動的にフローを管理。
柔軟な拡張性: ノードやリンク、イベントの種類を簡単に拡張できる設計を目指す。特に、将来的なプロトコルの追加や異なるトポロジのサポートが容易に行えるようにする。

## クラス設計とメソッド詳細

1. emulator.py
クラス: Emulator
役割: シミュレーション全体の管理を行うクラス。ネットワーク要素（ノード、リンク）の管理や、シミュレーションの実行、イベントの処理を担う。
属性
nodes: ネットワーク内のすべてのノード（ホスト、スイッチなど）を格納する辞書 (name -> Node)。
links: ネットワーク内のすべてのリンクを格納するリスト。
event_queue: イベントキューを管理する EventQueue オブジェクト。
current_time: シミュレーションの現在時刻（シミュレーション内の仮想時間）。
メソッド
__init__(self):
エミュレータの初期化。nodes, links, event_queue を初期化し、current_time を 0 に設定。

add_node(self, node):
ノードを nodes に追加。

add_link(self, link):
リンクを links に追加し、接続されたノードにリンク情報を登録。

schedule_event(self, event):
イベントキューにイベントを追加し、適切なタイミングで処理を行うようにスケジュール。

run_simulation(self, duration):
指定された duration（シミュレーション時間）の間、イベントキューからイベントを取得し処理。

process_event(self, event):
イベントの種類に応じて適切なハンドラを呼び出し、イベントを処理。

2. event_queue.py
クラス: EventQueue
役割: シミュレーション中に発生するイベントを管理し、時系列順に処理するキュー。
属性
queue: イベントを格納するプライオリティキュー（ヒープ）。
メソッド
__init__(self):
イベントキューの初期化。

push(self, event):
イベントをキューに追加。

pop(self):
最も早い時間のイベントをキューから取得し、削除。

is_empty(self):
キューが空かどうかを確認。

3. packet.py
クラス: Packet
役割: シミュレーション内でやり取りされるパケットの構造を定義。
属性
src: パケットの送信元ノード。
dst: パケットの宛先ノード。
payload: パケットのデータ部分。
protocol: パケットのプロトコル情報（例: TCP, UDP, ICMPなど）。

メソッド
__init__(self, src, dst, payload, protocol):
パケットの初期化。送信元、宛先、ペイロード、プロトコルを設定。

get_info(self):
パケットの基本情報を返すメソッド（デバッグ用）。