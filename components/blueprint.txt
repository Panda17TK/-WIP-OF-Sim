## 各コンポーネントの役割と機能

node.py:
ネットワーク内のすべてのデバイス（ホスト、スイッチなど）の共通基底クラスを提供する。
ネットワークエミュレータでの基本的な動作（パケットの受信と送信、リンク管理）を行う。

link.py:
ネットワーク内の2つのノードを接続するリンクを実装する。
帯域幅、遅延、パケット損失率などのリンク特性を持ち、パケット転送の際にこれらを考慮して動作する。

host.py:
ネットワークのホスト（エンドデバイス）を実装する。
パケットの生成や受信、特定のトラフィックパターンを発生させる機能を提供する。

switch.py:
OpenFlowスイッチを実装し、フローテーブルの管理、パケット転送、コントローラとの通信を行う。
パケットのマッチングとアクション実行、フローエントリーの管理を実装する。

設計の詳細

1. node.py

クラス: Node
役割: すべてのネットワークデバイスの基本クラスとして機能し、リンクとパケットの管理を行う。
属性
name: ノードの名前（例: "Host1", "Switch1"）。
links: このノードに接続されているリンクのリスト。

メソッド

__init__(self, name):
ノードの初期化。名前と接続リンクリストを初期化。

add_link(self, link):
このノードにリンクを追加。

receive_packet(self, packet, in_port=None):
パケットを受信し、必要に応じて処理または転送。

send_packet(self, packet, out_port):
指定されたポートにパケットを送信。

2. link.py

クラス: Link
役割: 2つのノードを接続し、パケットを転送する機能を提供します。
属性
node1: 接続されている最初のノード。
node2: 接続されている2番目のノード。
bandwidth: リンクの帯域幅（Mbps）。
delay: リンクの遅延（ミリ秒）。
packet_loss_rate: パケット損失率（0〜1）。

メソッド

__init__(self, node1, node2, bandwidth, delay, packet_loss_rate):
リンクの初期化。ノード間の接続、帯域幅、遅延、パケット損失率を設定。

transfer_packet(self, packet, src_node):
パケットをソースノードから転送し、宛先ノードに送信します。

3. host.py

クラス: Host
役割: エンドデバイスとして、パケットの生成や受信、トラフィックの送信を行います。
属性
name: ホストの名前。
ip_address: ホストのIPアドレス（仮実装）。
mac_address: ホストのMACアドレス（仮実装）。

メソッド
__init__(self, name, ip_address, mac_address):
ホストの初期化。名前、IPアドレス、MACアドレスを設定。

generate_packet(self, dst_ip, payload):
新しいパケットを生成し、送信します。

send_packet(self, packet):
パケットを送信します。

4. switch.py

クラス: Switch
役割: OpenFlowスイッチを実装し、フローテーブルを基にパケット転送を行います。未知のパケットはコントローラに送信され、フローの設定を受け取ります。
属性
name: スイッチの名前。
flow_table: スイッチのフローテーブル（マッチアクションのリスト）。
ports: 接続されたポート（リンク）のリスト。

メソッド

__init__(self, name):
スイッチの初期化。名前とフローテーブル、ポートを初期化。

add_port(self, link):
スイッチにポート（リンク）を追加。

receive_packet(self, packet, in_port):
パケットを受信し、フローテーブルを基に処理します。

install_flow(self, match, action):
フローテーブルに新しいフローエントリーをインストール。

send_packet(self, packet, out_port):
指定されたポートにパケットを送信。
