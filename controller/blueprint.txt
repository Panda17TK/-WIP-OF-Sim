## 基本的な設計方針

コントローラの抽象化:
コントローラは複数のスイッチと通信し、ネットワーク全体のフローを管理します。そのため、コントローラの基本的なインターフェースを抽象クラス BaseController として定義し、必要に応じてカスタムコントローラや Ryu コントローラと連携する具体的なクラスを派生させます。

スイッチとの通信プロトコル:
OpenFlow プロトコルに基づいて、スイッチからの Packet-In メッセージを受け取り、適切なフローエントリ (Flow-Mod) をインストールします。

簡単なフロー制御ロジックの実装:
最も基本的なフロー制御として、MAC アドレスや IP アドレスに基づいてパケットを転送する機能を実装します。


## クラス設計と役割

BaseController（base_controller.py）
すべてのコントローラクラスの基底クラスであり、基本的なインターフェース（メッセージの受信、フローの設定）を定義します。

CustomController（custom_controller.py）
BaseController を継承し、シンプルなカスタムコントローラの実装を行います。スイッチからのパケットを受け取り、フローエントリをインストールします。

RyuController（ryu_controller.py）
Ryu コントローラを使って実際の OpenFlow プロトコルを実行し、シミュレーションとリアルなネットワーク環境を接続します（オプション機能として設計）。